// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbqueries

import (
	"context"
	"database/sql"
)

const deleteUrl = `-- name: DeleteUrl :execrows
DELETE from urls
WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUrl, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUrlByAlias = `-- name: GetUrlByAlias :one
SELECT id, alias, url, count, created_at
FROM urls
WHERE alias = $1
`

func (q *Queries) GetUrlByAlias(ctx context.Context, alias string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlByAlias, alias)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const getUrlById = `-- name: GetUrlById :one
SELECT id, alias, url, count, created_at
FROM urls
WHERE id = $1
`

func (q *Queries) GetUrlById(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRowContext(ctx, getUrlById, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const getUrls = `-- name: GetUrls :many
SELECT id, alias, url, count, created_at
FROM urls
`

func (q *Queries) GetUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Alias,
			&i.Url,
			&i.Count,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUrl = `-- name: InsertUrl :one
INSERT INTO urls (url, alias)
VALUES ($1, $2)
RETURNING id, alias, url, count, created_at
`

type InsertUrlParams struct {
	Url   string
	Alias string
}

func (q *Queries) InsertUrl(ctx context.Context, arg InsertUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, insertUrl, arg.Url, arg.Alias)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Url,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const updateUrl = `-- name: UpdateUrl :execrows
UPDATE urls SET
alias = coalesce($2, alias),
count = coalesce($3, count)
WHERE id = $1
`

type UpdateUrlParams struct {
	ID    int32
	Alias sql.NullString
	Count sql.NullInt32
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUrl, arg.ID, arg.Alias, arg.Count)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
